#cloud-config
repo_update: true
write_files:
  - path: /run-container.sh
    permissions: 755
    content: |
      #!/bin/bash
      echo "${USERDATA_BEGIN}" >> /var/log/userdata-output
      podman pull ${VALIDATOR_IMAGE} || echo "Warning: could not pull the specified docker image, will try to use the prepulled one" >> /var/log/userdata-output
      VALIDATOR_REFERENCE=`echo ${VALIDATOR_IMAGE} | cut -d : -f 1`
      # Retrieving the latest image successfully pulled (either from the script, or prepulled in the AMI)
      IMAGE=`podman images ${VALIDATOR_REPO} -q  | head -n 2 | tail -n 1`
      echo "Using IMAGE : $IMAGE" >> /var/log/userdata-output
      if [[ "${CACERT}" != "" ]]; then
        echo "${CACERT}" | base64 --decode > /proxy.pem
        podman run -v /proxy.pem:/proxy.pem -e "HTTP_PROXY=${HTTP_PROXY}" -e "HTTPS_PROXY=${HTTPS_PROXY}" --env "AWS_REGION=${AWS_REGION}" -e "START_VERIFIER=${VALIDATOR_START_VERIFIER}" -e "END_VERIFIER=${VALIDATOR_END_VERIFIER}" ${IMAGE} --timeout=${TIMEOUT} --cacert=/proxy.pem --no-tls=${NOTLS}  >> /var/log/userdata-output || echo "Failed to successfully run the docker container"
      else
        podman run --env "AWS_REGION=${AWS_REGION}" -e "HTTP_PROXY=${HTTP_PROXY}" -e "START_VERIFIER=${VALIDATOR_START_VERIFIER}" -e "END_VERIFIER=${VALIDATOR_END_VERIFIER}" ${IMAGE} --timeout=${TIMEOUT}  >> /var/log/userdata-output || echo "Failed to successfully run the docker container"
      fi
      echo "${USERDATA_END}" >> /var/log/userdata-output
runcmd:
  - /run-container.sh
  - cat /var/log/userdata-output >/dev/console
