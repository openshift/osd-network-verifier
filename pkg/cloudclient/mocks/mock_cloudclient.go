// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cloudclient/cloudclient.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCloudClient is a mock of CloudClient interface.
type MockCloudClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudClientMockRecorder
}

// MockCloudClientMockRecorder is the mock recorder for MockCloudClient.
type MockCloudClientMockRecorder struct {
	mock *MockCloudClient
}

// NewMockCloudClient creates a new mock instance.
func NewMockCloudClient(ctrl *gomock.Controller) *MockCloudClient {
	mock := &MockCloudClient{ctrl: ctrl}
	mock.recorder = &MockCloudClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudClient) EXPECT() *MockCloudClientMockRecorder {
	return m.recorder
}

// ByoVPCVerifier mocks base method.
func (m *MockCloudClient) ByoVPCVerifier(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByoVPCVerifier", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ByoVPCVerifier indicates an expected call of ByoVPCVerifier.
func (mr *MockCloudClientMockRecorder) ByoVPCVerifier(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByoVPCVerifier", reflect.TypeOf((*MockCloudClient)(nil).ByoVPCVerifier), ctx)
}

// VerifyEgress mocks base method.
func (m *MockCloudClient) VerifyEgress(ctx context.Context, vpcSubnetID, cloudImageID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEgress", ctx, vpcSubnetID, cloudImageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyEgress indicates an expected call of VerifyEgress.
func (mr *MockCloudClientMockRecorder) VerifyEgress(ctx, vpcSubnetID, cloudImageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEgress", reflect.TypeOf((*MockCloudClient)(nil).VerifyEgress), ctx, vpcSubnetID, cloudImageID)
}
